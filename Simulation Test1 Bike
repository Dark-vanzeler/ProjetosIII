#define ECHO_PIN1 2
#define TRIG_PIN1 3
#define ECHO_PIN2 4
#define TRIG_PIN2 5
#define ECHO_PIN3 6
#define TRIG_PIN3 7
#define m1 12
// atribuição dos pinos

void setup() {
  Serial.begin(115200);
  pinMode(TRIG_PIN1, OUTPUT);
  pinMode(ECHO_PIN1, INPUT); // definição E/S pinos do Sensor 1
  
  pinMode(TRIG_PIN2, OUTPUT);
  pinMode(ECHO_PIN2, INPUT); // definição E/S pinos do Sensor 2
  
  pinMode(TRIG_PIN3, OUTPUT);
  pinMode(ECHO_PIN3, INPUT);// definição E/S pinos do Sensor 3
  
  pinMode(LED_BUILTIN, OUTPUT); // definição motor 1 como saída
  pinMode(m1, OUTPUT);	//definição motor 2 como saída
}

float readDistanceCM(int x, int y) {
  digitalWrite(x, LOW);
  delayMicroseconds(2);
  digitalWrite(x, HIGH);
  delayMicroseconds(10);
  digitalWrite(x, LOW); // leitura da distância sensor
  int duration = pulseIn(y, HIGH);
  return duration * 0.034 / 2;
}

void loop() {
  
  boolean close = true;

  float distance1 = readDistanceCM(TRIG_PIN3, ECHO_PIN3);
  float distance2 = readDistanceCM(TRIG_PIN1, ECHO_PIN1);
  float distance3 = readDistanceCM(TRIG_PIN2, ECHO_PIN2);
  
  if (150 > distance1 && distance1 < distance2 && distance1 < distance3){
  	digitalWrite(LED_BUILTIN, close);
  	delay(500);
  	digitalWrite(LED_BUILTIN, !close); //comparação distância sensor 1
  }else if (150 > distance2 && distance2 < distance1 && distance2 < distance3){
    digitalWrite(LED_BUILTIN, close); 
  	digitalWrite(m1, close);
  	delay(500);
    digitalWrite(LED_BUILTIN, !close);
  	digitalWrite(m1, !close); //comparação distância sensor 2
  }else if (150 > distance3 && distance3 < distance1 && distance3 < distance2){
  	digitalWrite(m1, close);
  	delay(500);
  	digitalWrite(m1, !close); //comparação distância sensor 2
  }
  
  delay(100);
}
